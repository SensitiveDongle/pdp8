  0x000: 0x00A    1: ascii_nl, 10 /This is space so your terminal ends with a newline
  0x001: 0x190    2: test, 400
                  3:   ORIG 4092
                  4: 
  0xFFC: 0x036    5: PARTEVILHERE, 54
  0xFFD: 0x036    6: OTHERPARTEVILLURKS, 54 /Random comment for no reason! /Oh noes?! /Another?
  0xFFE: 0x036    7: FINALPART, 54
                  8: 		ORIG 104 /Comments, they are everywhere. / //
  0x068: 0xFFC    9: LABELTOEVIL, 4092
  0x069: 0xFFD   10: OTHERLABEL, 4093
  0x06A: 0xFFE   11: ANDANOTHER, 4094
                 12: 	ORIG 100
                 13: whee,,,: /Make sure you handle that colon////////
                 14: 	ORIG 13
                 15: 
                 16: START, /Why is a comment here?
  0x00D: 0x368   17: 	TAD I LABELTOEVIL
  0x00E: 0x62A   18: 	DCA 42
  0x00F: 0x369   19: 	TAD I OTHERLABEL
  0x010: 0x62B   20: 	DCA 43
  0x011: 0x36A   21: 	TAD I ANDANOTHER
  0x012: 0x62C   22: 	DCA 44
  0x013: 0xB01   23: 	JMP I test
                 24: 
                 25: 	ORIG 400
                 26: OVERHERE,
                 27: 	
  0x190: 0x22A   28: 	TAD 42
  0x191: 0xC20   29: 	iot 4,,, ,,, 0
  0x192: 0xE80   30: 	cla
  0x193: 0x22B   31: 	TAD 43
  0x194: 0xC20   32: 	iot 4 ,,, 0
  0x195: 0xE80   33: 	cla
  0x196: 0x22C   34: 		TAD 44
  0x197: 0xC20   35: 	 iot 4, ,, , 0
  0x198: 0xE80   36: 	  cla
  0x199: 0x200   37: 	 TAD ascii_nl
  0x19A: 0xC20   38: 			 iot 4 0
  0x19B: 0xE80   39: 	 cla
  0x19C: 0xF28   40: 	sza rss  /Better hope you have this right in your PDP8.  Remove rss if you dare.
  0x19D: 0xF02   41: 	hlt
  0x19E: 0xA0D   42: 	jmp start
                 43: 
                 44: 
  0x19F: 0x000   45: parray, 0
  0x1A0: 0x000   46: 		0
  0x1A1: 0x000   47: 		0
  0x1A2: 0x000   48: 		0
  0x1A3: 0x000   49: 		0        / array of 5 digits.
  0x1A4: 0x19F   50: arradd, parray   / address of print digit array
  0x1A5: 0x19F   51: arrptr, parray   / pointer into array for next digit
  0x1A6: 0x000   52: tempn,  0        / space to save working value of n
  0x1A7: 0x030   53: ascii_zero,  '0'
  0x1A8: 0x00A   54: ten,    10
                 55: 
  0x1A9: 0x000   56: printn,  0
  0x1AA: 0x6A6   57: 		dca tempn		/ save n
  0x1AB: 0x2A8   58: 		tad ten
  0x1AC: 0x600   59: 		dca X           / to divide by 10
  0x1AD: 0x2A6   60: 		tad tempn		/ reload n
  0x1AE: 0x800   61: plo,	jms div 		/ divide A by 10; quotient in A; remainder in R
  0x1AF: 0x6A6   62: 		dca tempn       / n = n / 10
  0x1B0: 0x200   63:         tad r			/ load remainder
  0x1B1: 0x7A5   64: 		dca i arrptr	/ save digit
  0x1B2: 0x4A5   65: 		isz arrptr
  0x1B3: 0x2A6   66: 		tad tempn
  0x1B4: 0xF20   67: 		sza				/ are we done? is tempn = 0
  0x1B5: 0xAAE   68: 		jmp plo
                 69: 		/ we have broken n into its digits; now print them
                 70: 		/ load pointer and decrement it
  0x1B6: 0xEA0   71: ploo,	cla cma			/ -1 -> A
  0x1B7: 0x2A5   72: 		tad arrptr
  0x1B8: 0x6A5   73: 		dca arrptr
  0x1B9: 0x3A5   74: 		tad i arrptr    / get the digit
  0x1BA: 0x2A7   75: 		tad ascii_zero  / change to ascii
  0x1BB: 0xC20   76: 		iot 4 0			/ output to stdout
  0x1BC: 0xE80   77: 		cla
  0x1BD: 0x2A5   78: 		tad arrptr
  0x1BE: 0xE21   79: 		cma iac			/ -arrptr
  0x1BF: 0x2A4   80: 		tad arradd		/ compare with base address
  0x1C0: 0xF20   81: 		sza
  0x1C1: 0xAB6   82: 		jmp ploo
  0x1C2: 0xBA9   83: 		jmp i printn     / we done.
                 84: 
                 85: / divide
                 86: / divide A register by the value in X
                 87: 
  0x1C3: 0x000   88: q,      0    / quotient
  0x1C4: 0x000   89: r,      0    / remainder
                 90: 
  0x1C5: 0x000   91: X,      0
  0x1C6: 0x000   92: div,    0
  0x1C7: 0x6C4   93: 		dca  r
  0x1C8: 0x6C3   94: 		dca  q    / set q = 0
  0x1C9: 0x2C5   95: 		tad  X
  0x1CA: 0xFA8   96: 		sza rss cla / make sure X is not zero
  0x1CB: 0xBC6   97: 		jmp I div   / divide by zero, return zero
                 98: 
  0x1CC: 0x2C5   99: dloop,  tad  X    /  divide by X
  0x1CD: 0xE21  100: 		cma iac   / -X
  0x1CE: 0x2C4  101: 		tad  r    /  r - X
  0x1CF: 0xF48  102: 		spa       / if r > X skip
  0x1D0: 0xA00  103: 		jmp  dfini
  0x1D1: 0x4C3  104: 		isz  q    / q = q + 1 (for the X we just subtracted)
  0x1D2: 0x6C4  105: 		dca  r    / r = r - X
  0x1D3: 0xACC  106:         jmp  dloop
  0x1D4: 0xE80  107: dfini,  cla
  0x1D5: 0x2C3  108: 		tad q			/ put quotient in a
  0x1D6: 0xBC6  109: 		jmp i div     / return 
                110: 		END start
                111: 	
                112: 	
                113: 
                114: 
